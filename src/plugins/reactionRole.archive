// This project is licensed under the GNU General Public License v3.0 (GPLv3) with a Non-Commercial Clause.

// You are not allowed to sell my code.
// In general, you may not use my code in any commercial activity.
// You must mention that I wrote the code in any redistribution.
// You may not say that you are the author of my code.

import { Client, TextChannel } from 'discord.js';
import { config } from '../core/env.js';

const REACTION_EMOJI = '‚úÖ';

console.log('üì¶ Plugin reactionRole.ts charg√©');

export default function reactionRole(client: Client) {

    client.once('ready', async () => {
        console.log('‚öôÔ∏è Le plugin reactionRole est en train de d√©marrer...');

        let channel: TextChannel;
        try {
            const fetchedChannel = await client.channels.fetch(config.channelId);
            if (!fetchedChannel || !(fetchedChannel instanceof TextChannel)) {
                console.error('‚ùå Le salon est introuvable ou n\'est pas un TextChannel');
                return;
            }
            channel = fetchedChannel;
            console.log(`üì∫ Salon r√©cup√©r√© : #${channel.name}`);
        } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration du salon :', error);
            return;
        }

        let targetMessage;
        try {
            targetMessage = await channel.messages.fetch(config.targetMessageId);
            if (!targetMessage) {
                console.error('‚ùå Le message cible n\'a pas √©t√© trouv√©');
                return;
            }
            console.log(`‚úâÔ∏è Message cible trouv√© : ${targetMessage.id}`);
        } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration du message cible :', error);
            return;
        }

        try {
            await targetMessage.react(REACTION_EMOJI);
            console.log(`‚úÖ R√©action "${REACTION_EMOJI}" ajout√©e au message ${targetMessage.id}`);
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'ajout de la r√©action :', error);
        }
    });

    client.on('messageReactionAdd', async (reaction, user) => {
        console.log(`üí° R√©action d√©tect√©e : ${reaction.emoji.name} par ${user.tag}`);

        try {
            if (reaction.partial) {
                try {
                    await reaction.fetch();
                    console.log('üîÑ Reaction partielle r√©cup√©r√©e');
                } catch (err) {
                    console.error('‚ùå Impossible de fetch la r√©action partielle :', err);
                    return;
                }
            }

            if (reaction.message.partial) {
                try {
                    await reaction.message.fetch();
                    console.log('üîÑ Message partiel r√©cup√©r√©');
                } catch (err) {
                    console.error('‚ùå Impossible de fetch le message partiel :', err);
                    return;
                }
            }

            if (
                reaction.message.id === config.targetMessageId &&
                reaction.emoji.name === REACTION_EMOJI &&
                !user.bot
            ) {
                console.log('‚úÖ R√©action correcte d√©tect√©e');

                try {
                    const guild = await client.guilds.fetch(config.guildId);
                    const member = await guild.members.fetch(user.id);
                    if (!member.roles.cache.has(config.roleId)) {
                        await member.roles.add(config.roleId);
                        console.log(`üéÅ R√¥le ajout√© √† ${user.tag}`);
                    } else {
                        console.log(`‚ÑπÔ∏è ${user.tag} a d√©j√† le r√¥le`);
                    }
                } catch (err) {
                    console.error('‚ùå Erreur lors de l\'ajout du r√¥le :', err);
                }
            } else {
                console.log('‚ö†Ô∏è R√©action ignor√©e (mauvais message ou emoji)');
            }
        } catch (err) {
            console.error('‚ùå Erreur dans messageReactionAdd :', err);
        }
    });

    client.on('messageReactionRemove', async (reaction, user) => {
        console.log(`üí° R√©action retir√©e : ${reaction.emoji.name} par ${user.tag}`);

        try {
            if (reaction.partial) await reaction.fetch();
            if (reaction.message.partial) await reaction.message.fetch();

            if (
                reaction.message.id === config.targetMessageId &&
                reaction.emoji.name === REACTION_EMOJI &&
                !user.bot
            ) {
                const guild = await client.guilds.fetch(config.guildId);
                const member = await guild.members.fetch(user.id);
                if (member.roles.cache.has(config.roleId)) {
                    await member.roles.remove(config.roleId);
                    console.log(`üóëÔ∏è R√¥le retir√© √† ${user.tag}`);
                }
            }
        } catch (err) {
            console.error('‚ùå Erreur dans messageReactionRemove :', err);
        }
    });
}
